# argo-cd-repo-server-ksops-patch.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: argocd-repo-server
spec:
  template:
    spec:
      # 1. Define an emptyDir volume which will hold the custom binaries
      volumes:
      - name: custom-tools
        emptyDir: {}
      - name: sops-gpg
        secret:
          secretName: sops-gpg
      - name: gnupg-home
        emptyDir: {}
      # 2. Use an init container to download/copy custom binaries into the emptyDir
      initContainers:
      - name: install-ksops
        image: viaductoss/ksops:v4.2.4
        command: ["/bin/sh", "-c"]
        args:
        - echo "Installing KSOPS..."; mv ksops /custom-tools/; mv kustomize /custom-tools/; echo "Done.";
        volumeMounts:
        - mountPath: /custom-tools
          name: custom-tools
      - name: import-gpg-key
        image: quay.io/argoproj/argocd:v2.8.4
        command:
        - "/bin/sh"
        - "-c"
        args:
        - |
          gpg --batch --import /sops-gpg/sops.asc
        env:
        - name: GNUPGHOME
          value: /gnupg-home/.gnupg
        volumeMounts:
        - mountPath: /sops-gpg
          name: sops-gpg
        - mountPath: /gnupg-home
          name: gnupg-home

      # 3. Volume mount the custom binary to the bin directory (overriding the existing version)
      containers:
      - name: argocd-repo-server
        env:
        - name: XDG_CONFIG_HOME
          value: /.config
        - name: GNUPGHOME
          value: /home/argocd/.gnupg
        volumeMounts:
        - mountPath: /usr/local/bin/kustomize
          name: custom-tools
          subPath: kustomize
        - mountPath: /home/argocd/.gnupg
          name: gnupg-home
          subPath: .gnupg
          # Verify this matches a XDG_CONFIG_HOME=/.config env variable
        - mountPath: /usr/local/bin/ksops
          name: custom-tools
          subPath: ksops





## If you use AWS or GCP KMS, don't forget to include the necessary credentials to decrypt the secrets!
# env:
#  - name: AWS_ACCESS_KEY_ID
#    valueFrom:
#      secretKeyRef:
#        name: argocd-aws-credentials
#        key: accesskey
#  - name: AWS_SECRET_ACCESS_KEY
#    valueFrom:
#      secretKeyRef:
#        name: argocd-aws-credentials
#        key: secretkey
